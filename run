#!/bin/bash

# Portable deployment script for all shell environments
# This version avoids bash-specific syntax that may not work in dash/sh

set -e

LOG_PREFIX="[DEPLOYMENT]"
echo "$LOG_PREFIX === Universal Spring Boot Startup ==="
echo "$LOG_PREFIX Timestamp: $(date)"
echo "$LOG_PREFIX Process ID: $$"
echo "$LOG_PREFIX User: $(whoami)"
echo "$LOG_PREFIX Environment variables:"
echo "$LOG_PREFIX   PATH: $PATH"
echo "$LOG_PREFIX   HOME: $HOME"
echo "$LOG_PREFIX   PWD: $PWD"
echo "$LOG_PREFIX   PORT: ${PORT:-not set}"
echo "$LOG_PREFIX   JAVA_HOME: ${JAVA_HOME:-not set}"

# Detect how we were called and from where
SCRIPT_NAME=$(basename "$0")
SCRIPT_DIR=$(dirname "$0")
CURRENT_DIR=$(pwd)

echo "$LOG_PREFIX Script execution details:"
echo "$LOG_PREFIX   Script name: $SCRIPT_NAME"
echo "$LOG_PREFIX   Called from: $CURRENT_DIR"
echo "$LOG_PREFIX   Script location: $SCRIPT_DIR"
echo "$LOG_PREFIX   Command line args: $*"

# Function to find project directory (using portable syntax)
find_project_directory() {
    echo "$LOG_PREFIX Searching for project directory with pom.xml..." >&2
    
    # Check each path individually (more portable than arrays)
    if [ -f "/home/runner/workspace/pom.xml" ]; then
        echo "$LOG_PREFIX   ✓ Found pom.xml at: /home/runner/workspace" >&2
        echo "/home/runner/workspace"
        return 0
    fi
    
    if [ -f "$CURRENT_DIR/pom.xml" ]; then
        echo "$LOG_PREFIX   ✓ Found pom.xml at: $CURRENT_DIR" >&2
        echo "$CURRENT_DIR"
        return 0
    fi
    
    if [ -f "$SCRIPT_DIR/pom.xml" ]; then
        echo "$LOG_PREFIX   ✓ Found pom.xml at: $SCRIPT_DIR" >&2
        echo "$SCRIPT_DIR"
        return 0
    fi
    
    if [ -f "/workspace/pom.xml" ]; then
        echo "$LOG_PREFIX   ✓ Found pom.xml at: /workspace" >&2
        echo "/workspace"
        return 0
    fi
    
    if [ -f "$HOME/workspace/pom.xml" ]; then
        echo "$LOG_PREFIX   ✓ Found pom.xml at: $HOME/workspace" >&2
        echo "$HOME/workspace"
        return 0
    fi
    
    echo "$LOG_PREFIX ERROR: Cannot locate project directory with pom.xml" >&2
    echo "$LOG_PREFIX Searched paths:" >&2
    echo "$LOG_PREFIX   - /home/runner/workspace" >&2
    echo "$LOG_PREFIX   - $CURRENT_DIR" >&2
    echo "$LOG_PREFIX   - $SCRIPT_DIR" >&2
    echo "$LOG_PREFIX   - /workspace" >&2
    echo "$LOG_PREFIX   - $HOME/workspace" >&2
    return 1
}

# Find and change to project directory
echo "$LOG_PREFIX Starting project directory search..."
PROJECT_DIR=$(find_project_directory)
if [ $? -ne 0 ]; then
    echo "$LOG_PREFIX FATAL: Project directory search failed" >&2
    exit 1
fi

echo "$LOG_PREFIX Project directory found: $PROJECT_DIR"
echo "$LOG_PREFIX Changing to project directory..."
cd "$PROJECT_DIR"
echo "$LOG_PREFIX Current working directory: $(pwd)"
echo "$LOG_PREFIX Project directory contents:"
ls -la | head -10

# Set up Java environment (runtime detection)
echo "$LOG_PREFIX Setting up Java runtime environment..."

# Check if java command is already available
if command -v java >/dev/null 2>&1; then
    JAVA_COMMAND_PATH=$(command -v java)
    JAVA_HOME=$(dirname $(dirname "$JAVA_COMMAND_PATH"))
    echo "$LOG_PREFIX ✓ Found Java command in PATH: $JAVA_COMMAND_PATH" >&2
else
    # Comprehensive Java detection for runtime
    JAVA_HOME=""
    echo "$LOG_PREFIX Searching for Java installations..." >&2
    
    # Check Nix store (Replit environment)
    if [ -d "/nix/store" ]; then
        echo "$LOG_PREFIX Checking Nix store..." >&2
        NIX_JDK_PATHS=$(ls -d /nix/store/*jdk* /nix/store/*adoptopenjdk* /nix/store/*openjdk* 2>/dev/null || echo "")
        if [ -n "$NIX_JDK_PATHS" ]; then
            for path in $NIX_JDK_PATHS; do
                if [ -d "$path" ] && [ -f "$path/bin/java" ]; then
                    JAVA_HOME="$path"
                    echo "$LOG_PREFIX ✓ Found Java at: $JAVA_HOME" >&2
                    break
                fi
            done
        fi
    fi
    
    # Check standard locations
    if [ -z "$JAVA_HOME" ]; then
        echo "$LOG_PREFIX Checking standard Java locations..." >&2
        STANDARD_PATHS="/usr/lib/jvm/java-11-openjdk /usr/lib/jvm/default-java /opt/java/openjdk /usr/lib/jvm/java-8-openjdk"
        for path in $STANDARD_PATHS; do
            if [ -d "$path" ] && [ -f "$path/bin/java" ]; then
                JAVA_HOME="$path"
                echo "$LOG_PREFIX ✓ Found Java at: $JAVA_HOME" >&2
                break
            fi
        done
    fi
    
    # Check if we have a portable Java from build script
    if [ -z "$JAVA_HOME" ] && [ -d "$PWD/java" ] && [ -f "$PWD/java/bin/java" ]; then
        JAVA_HOME="$PWD/java"
        echo "$LOG_PREFIX ✓ Found portable Java at: $JAVA_HOME" >&2
    fi
    
    if [ -z "$JAVA_HOME" ]; then
        echo "$LOG_PREFIX ERROR: Java runtime not found." >&2
        echo "$LOG_PREFIX Please ensure Java is installed or run the build script first." >&2
        echo "$LOG_PREFIX Searched locations:" >&2
        echo "$LOG_PREFIX   - Nix store (/nix/store/*jdk*)" >&2
        echo "$LOG_PREFIX   - Standard paths (/usr/lib/jvm/java-11-openjdk, etc.)" >&2
        echo "$LOG_PREFIX   - Portable Java (./java)" >&2
        exit 1
    fi
    
    export JAVA_HOME
    export PATH="$JAVA_HOME/bin:$PATH"
fi

# Verify Java is available
if ! command -v java >/dev/null 2>&1; then
    echo "$LOG_PREFIX ERROR: Java command not available after setup" >&2
    echo "$LOG_PREFIX JAVA_HOME: $JAVA_HOME" >&2
    echo "$LOG_PREFIX PATH: $PATH" >&2
    exit 1
fi

JAVA_VERSION=$(java -version 2>&1 | head -1)
echo "$LOG_PREFIX ✓ Java runtime verified: $JAVA_VERSION" >&2

# Set deployment variables
export SERVER_PORT="${PORT:-5000}"
export SPRING_PROFILES_ACTIVE="production"

echo "$LOG_PREFIX Application configuration:"
echo "$LOG_PREFIX   - Server Port: $SERVER_PORT"
echo "$LOG_PREFIX   - Spring Profile: $SPRING_PROFILES_ACTIVE"
echo "$LOG_PREFIX   - Project Directory: $PROJECT_DIR"
echo "$LOG_PREFIX   - Java Home: $JAVA_HOME"

# Check if JAR file exists (should be built by separate build script)
echo "$LOG_PREFIX Checking for pre-built JAR file..."

# Verify JAR
JAR_FILE="target/twitch-chat-reader-1.0.0.jar"
echo "$LOG_PREFIX Verifying JAR file: $JAR_FILE"
if [ ! -f "$JAR_FILE" ]; then
    echo "$LOG_PREFIX ERROR: JAR file not found: $JAR_FILE" >&2
    echo "$LOG_PREFIX This suggests the build step was not completed." >&2
    echo "$LOG_PREFIX Please ensure the build script has been run first." >&2
    exit 1
fi

JAR_SIZE=$(ls -lh "$JAR_FILE" | awk '{print $5}')
echo "$LOG_PREFIX ✓ JAR built successfully: $JAR_FILE ($JAR_SIZE)"
echo "$LOG_PREFIX Starting Spring Boot application..."

# Start with optimized settings
echo "$LOG_PREFIX Executing Java application with optimized JVM settings..."
exec java \
    -Xmx512m \
    -Xms256m \
    -XX:+UseG1GC \
    -XX:MaxGCPauseMillis=200 \
    -XX:+ExitOnOutOfMemoryError \
    -Dserver.port="$SERVER_PORT" \
    -Dspring.profiles.active="$SPRING_PROFILES_ACTIVE" \
    -Djava.security.egd=file:/dev/./urandom \
    -Dfile.encoding=UTF-8 \
    -jar "$JAR_FILE"